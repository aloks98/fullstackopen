{"version":3,"sources":["components/person.jsx","components/personForm.jsx","components/filter.jsx","components/notification.jsx","App.js","serviceWorker.js","index.js"],"names":["Person","personsToShow","deleteContact","map","p","name","number","onClick","id","PersonForm","props","onSubmit","addContact","value","newName","onChange","handlePhonebookChange","newNumber","handleNumberChange","type","Filter","filter","handleFilterChange","Notification","message","className","text","BASE_URL","App","useState","persons","setPersons","setNewName","setNewNumber","setFilter","setMessage","useEffect","axios","get","then","response","data","catch","e","console","log","toLowerCase","search","target","preventDefault","newContact","length","includes","updateContact","window","confirm","put","res","setTimeout","pIndex","findIndex","post","concat","delete","newPersons","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.fff1b447.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Person = ({ personsToShow, deleteContact }) => {\n  return personsToShow.map((p) => (\n    <div>\n      <p>\n        {p.name} {p.number}\n        <button onClick={() => deleteContact(p.id, p.name)}>Delete</button>\n      </p>\n      \n    </div>\n  ));\n};\n\nexport default Person;\n","import React from \"react\";\n\nconst PersonForm = (props) => {\n  return (\n    <form onSubmit={props.addContact}>\n      <div>\n        name: <input value={props.newName} onChange={props.handlePhonebookChange} />\n      </div>\n      <div>\n        number: <input value={props.newNumber} onChange={props.handleNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default PersonForm;","import React from 'react'\n\nconst Filter = (props) => {\n    return (\n        <div>\n        show names with: <input value={props.filter} onChange={props.handleFilterChange} />\n      </div>\n    )\n}\n\nexport default Filter","import React from 'react'\n\nconst Notification = ({ message}) => {\n    if (message === null) {\n      return null\n    }\n\n    if (message.type === 'fail'){\n        return (\n            <div className='error'>\n              {message.text}\n            </div>\n          )\n    }\n\n    return (\n      <div className='success'>\n        {message.text}\n      </div>\n    )\n  }\n\nexport default Notification;","import React, { useState, useEffect } from \"react\";\nimport Person from \"./components/person\";\nimport PersonForm from \"./components/personForm\";\nimport Filter from \"./components/filter\";\nimport axios from \"axios\";\nimport Notification from \"./components/notification\";\n\n\nlet BASE_URL = \"http://localhost:3001/persons\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [filter, setFilter] = useState(\"\");\n  const [message, setMessage] = useState(null);\n  \n\n  const handlePhonebookChange = (e) => {\n    //console.log(e.target.value);\n    setNewName(e.target.value);\n  };\n\n  const handleNumberChange = (e) => {\n    //console.log(e.target.value);\n    setNewNumber(e.target.value);\n  };\n\n  const handleFilterChange = (e) => {\n    //console.log(e.target.value);\n    setFilter(e.target.value);\n  };\n\n  useEffect(() => {\n    axios\n      .get(`${BASE_URL}`)\n      .then((response) => {\n        setPersons(response.data);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  }, []);\n\n  const addContact = (e) => {\n    e.preventDefault();\n    const newContact = {\n      id: persons.length + 1,\n      name: newName,\n      number: newNumber,\n    };\n    let exist = persons.map((p) => p.name);\n    if (exist.includes(newContact.name)) {\n      const updateContact = {\n        name: newName,\n        number: newNumber,\n      };\n      if (\n        window.confirm(\n          `${newContact.name} is already added to phonebook. Update the number?`\n        )\n      ) {\n        let id = persons.filter((p) => {\n          return p.name === newContact.name;\n        });\n        axios\n          .put(`${BASE_URL}/${id[0].id}`, updateContact)\n          .then((res) => {\n            setMessage({\n              text: `Contact '${newContact.name}' updated`,\n              type: \"success\",\n            });\n            setTimeout(() => {\n              setMessage(null);\n            }, 3000);\n          })\n          .catch((e) => console.log(e));\n        let pIndex = persons.findIndex((p) => p.id === id[0].id);\n        persons[pIndex].number = newContact.number;\n      }\n    } else {\n      axios\n        .post(`${BASE_URL}`, newContact)\n        .then((res) => {\n          setMessage({\n            text: `Contact '${newContact.name}' added`,\n            type: \"success\",\n          });\n          setTimeout(() => {\n            setMessage(null);\n          }, 3000);\n        })\n        .catch((e) => {\n          console.log(e);\n        });\n      setPersons(persons.concat(newContact));\n    }\n    setNewName(\"\");\n    setNewNumber(\"\");\n  };\n\n  const deleteContact = (id, name) => {\n    if (window.confirm(`Do you want to delete ${name}`)) {\n      console.log(id, name);\n      axios\n        .delete(`${BASE_URL}/${id}`)\n        .then((res) => {\n          console.log(res);\n        })\n        .catch((e) => {\n          setMessage({\n            text: `Contact '${name}' was already removed from server`,\n            type: \"fail\",\n          });\n          setTimeout(() => {\n            setMessage(null);\n          }, 5000);\n        });\n      let newPersons = persons.filter((p) => p.id !== id);\n      setPersons(newPersons);\n    }\n  };\n  const personsToShow = filter\n    ? persons.filter(\n        (p) => p.name.toLowerCase().search(filter.toLowerCase()) !== -1\n      )\n    : persons;\n\n  return (\n    <div>\n      <Notification message={message} />\n      <h1>Phonebook Filter</h1>\n      <Filter filter={filter} handleFilterChange={handleFilterChange} />\n      <h1>Add a new</h1>\n      <PersonForm\n        addContact={addContact}\n        newName={newName}\n        newNumber={newNumber}\n        handlePhonebookChange={handlePhonebookChange}\n        handleNumberChange={handleNumberChange}\n      />\n      <h1>Numbers</h1>\n      <div>\n        <Person personsToShow={personsToShow} deleteContact={deleteContact} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}